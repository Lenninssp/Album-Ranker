
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  imageUrl: 'imageUrl',
  imageStorageKey: 'imageStorageKey',
  passwordUpdatedAt: 'passwordUpdatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrackEditedScalarFieldEnum = {
  id: 'id',
  idTrack: 'idTrack',
  idAlbum: 'idAlbum',
  idArtist: 'idArtist',
  strTrack: 'strTrack',
  strAlbum: 'strAlbum',
  strArtist: 'strArtist',
  strGenre: 'strGenre',
  strMood: 'strMood',
  strStyle: 'strStyle',
  intDuration: 'intDuration',
  strDescriptionEN: 'strDescriptionEN',
  strTrackThumb: 'strTrackThumb',
  strMusicVid: 'strMusicVid',
  strMusicVidDirector: 'strMusicVidDirector',
  strMusicVidCompany: 'strMusicVidCompany',
  intMusicVidViews: 'intMusicVidViews',
  intMusicVidLikes: 'intMusicVidLikes',
  intTrackNumber: 'intTrackNumber',
  commentary: 'commentary',
  tag: 'tag',
  rating: 'rating',
  includesMetadata: 'includesMetadata',
  userId: 'userId'
};

exports.Prisma.AlbumEditedScalarFieldEnum = {
  id: 'id',
  idAlbum: 'idAlbum',
  idArtist: 'idArtist',
  strAlbum: 'strAlbum',
  strArtist: 'strArtist',
  intYearReleased: 'intYearReleased',
  strGenre: 'strGenre',
  strStyle: 'strStyle',
  strLabel: 'strLabel',
  strReleaseFormat: 'strReleaseFormat',
  strAlbumThumb: 'strAlbumThumb',
  strAlbumBack: 'strAlbumBack',
  strAlbumCDart: 'strAlbumCDart',
  strAlbum3DThumb: 'strAlbum3DThumb',
  strDescriptionEN: 'strDescriptionEN',
  strMood: 'strMood',
  strSpeed: 'strSpeed',
  strWikipediaID: 'strWikipediaID',
  commentary: 'commentary',
  tag: 'tag',
  rating: 'rating',
  includesMetadata: 'includesMetadata',
  userId: 'userId'
};

exports.Prisma.ArtistEditedScalarFieldEnum = {
  id: 'id',
  idArtist: 'idArtist',
  strArtist: 'strArtist',
  strArtistAlternate: 'strArtistAlternate',
  strLabel: 'strLabel',
  intFormedYear: 'intFormedYear',
  strGenre: 'strGenre',
  strStyle: 'strStyle',
  strMood: 'strMood',
  strCountry: 'strCountry',
  intMembers: 'intMembers',
  strWebsite: 'strWebsite',
  strBiographyEN: 'strBiographyEN',
  strArtistThumb: 'strArtistThumb',
  strArtistLogo: 'strArtistLogo',
  strArtistClearart: 'strArtistClearart',
  strArtistWideThumb: 'strArtistWideThumb',
  strArtistFanart: 'strArtistFanart',
  strArtistBanner: 'strArtistBanner',
  commentary: 'commentary',
  tag: 'tag',
  rating: 'rating',
  includesMetadata: 'includesMetadata',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Session: 'Session',
  User: 'User',
  TrackEdited: 'TrackEdited',
  AlbumEdited: 'AlbumEdited',
  ArtistEdited: 'ArtistEdited'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/lenninsabogal/Developer/NextJs/Album-Ranker/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/lenninsabogal/Developer/NextJs/Album-Ranker/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       Int\n  user         User     @relation(fields: [userId], references: [id])\n  expires      DateTime\n}\n\nmodel User {\n  id              Int     @id @default(autoincrement())\n  email           String  @unique\n  name            String?\n  password        String\n  imageUrl        String?\n  imageStorageKey String?\n\n  passwordUpdatedAt DateTime @default(now())\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  sessions Session[]\n\n  tracks  TrackEdited[]\n  albums  AlbumEdited[]\n  artists ArtistEdited[]\n}\n\nmodel TrackEdited {\n  id                  Int     @id @default(autoincrement())\n  idTrack             String\n  idAlbum             String\n  idArtist            String\n  strTrack            String\n  strAlbum            String\n  strArtist           String\n  strGenre            String?\n  strMood             String?\n  strStyle            String?\n  intDuration         String?\n  strDescriptionEN    String?\n  strTrackThumb       String?\n  strMusicVid         String?\n  strMusicVidDirector String?\n  strMusicVidCompany  String?\n  intMusicVidViews    String?\n  intMusicVidLikes    String?\n  intTrackNumber      String?\n  commentary          String\n  tag                 String\n  rating              String\n  includesMetadata    Boolean @default(true)\n  User                User?   @relation(fields: [userId], references: [id])\n  userId              Int?\n\n  @@unique([idTrack, userId])\n}\n\nmodel AlbumEdited {\n  id               Int     @id @default(autoincrement())\n  idAlbum          String\n  idArtist         String\n  strAlbum         String\n  strArtist        String\n  intYearReleased  String\n  strGenre         String?\n  strStyle         String?\n  strLabel         String?\n  strReleaseFormat String?\n  strAlbumThumb    String?\n  strAlbumBack     String?\n  strAlbumCDart    String?\n  strAlbum3DThumb  String?\n  strDescriptionEN String?\n  strMood          String?\n  strSpeed         String?\n  strWikipediaID   String?\n  commentary       String\n  tag              String\n  rating           String\n  includesMetadata Boolean @default(true)\n  User             User?   @relation(fields: [userId], references: [id])\n  userId           Int?\n\n  @@unique([idAlbum, userId])\n}\n\nmodel ArtistEdited {\n  id                 Int     @id @default(autoincrement())\n  idArtist           String\n  strArtist          String\n  strArtistAlternate String?\n  strLabel           String?\n  intFormedYear      String?\n  strGenre           String?\n  strStyle           String?\n  strMood            String?\n  strCountry         String?\n  intMembers         String?\n  strWebsite         String?\n  strBiographyEN     String?\n  strArtistThumb     String?\n  strArtistLogo      String?\n  strArtistClearart  String?\n  strArtistWideThumb String?\n  strArtistFanart    String?\n  strArtistBanner    String?\n  commentary         String\n  tag                String\n  rating             String\n  includesMetadata   Boolean @default(true)\n  User               User?   @relation(fields: [userId], references: [id])\n  userId             Int?\n\n  @@unique([idArtist, userId])\n}\n",
  "inlineSchemaHash": "68abe7f43ada26179e56ca28ebf5558c6565a617656593deeefc79b62babf9b9",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageStorageKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordUpdatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"tracks\",\"kind\":\"object\",\"type\":\"TrackEdited\",\"relationName\":\"TrackEditedToUser\"},{\"name\":\"albums\",\"kind\":\"object\",\"type\":\"AlbumEdited\",\"relationName\":\"AlbumEditedToUser\"},{\"name\":\"artists\",\"kind\":\"object\",\"type\":\"ArtistEdited\",\"relationName\":\"ArtistEditedToUser\"}],\"dbName\":null},\"TrackEdited\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"idTrack\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idAlbum\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idArtist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strTrack\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strAlbum\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strGenre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strMood\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strStyle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"intDuration\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strDescriptionEN\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strTrackThumb\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strMusicVid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strMusicVidDirector\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strMusicVidCompany\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"intMusicVidViews\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"intMusicVidLikes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"intTrackNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"commentary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tag\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"includesMetadata\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TrackEditedToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"AlbumEdited\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"idAlbum\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idArtist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strAlbum\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"intYearReleased\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strGenre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strStyle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strLabel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strReleaseFormat\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strAlbumThumb\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strAlbumBack\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strAlbumCDart\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strAlbum3DThumb\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strDescriptionEN\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strMood\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strSpeed\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strWikipediaID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"commentary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tag\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"includesMetadata\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AlbumEditedToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"ArtistEdited\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"idArtist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtistAlternate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strLabel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"intFormedYear\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strGenre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strStyle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strMood\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strCountry\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"intMembers\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strWebsite\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strBiographyEN\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtistThumb\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtistLogo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtistClearart\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtistWideThumb\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtistFanart\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strArtistBanner\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"commentary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tag\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"includesMetadata\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ArtistEditedToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

